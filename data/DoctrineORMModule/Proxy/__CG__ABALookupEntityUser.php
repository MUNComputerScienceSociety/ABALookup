<?php

namespace DoctrineORMModule\Proxy\__CG__\ABALookup\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \ABALookup\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function getTherapist()
    {
        $this->__load();
        return parent::getTherapist();
    }

    public function getSex()
    {
        $this->__load();
        return parent::getSex();
    }

    public function getCodeOfConduct()
    {
        $this->__load();
        return parent::getCodeOfConduct();
    }

    public function getABACourse()
    {
        $this->__load();
        return parent::getABACourse();
    }

    public function getVerified()
    {
        $this->__load();
        return parent::getVerified();
    }

    public function getModerator()
    {
        $this->__load();
        return parent::getModerator();
    }

    public function getDisplayName()
    {
        $this->__load();
        return parent::getDisplayName();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function setTherapist($therapist)
    {
        $this->__load();
        return parent::setTherapist($therapist);
    }

    public function setSex($sex)
    {
        $this->__load();
        return parent::setSex($sex);
    }

    public function setCodeOfConduct($code_of_conduct)
    {
        $this->__load();
        return parent::setCodeOfConduct($code_of_conduct);
    }

    public function setABACourse($ABA_course)
    {
        $this->__load();
        return parent::setABACourse($ABA_course);
    }

    public function setVerified($verified)
    {
        $this->__load();
        return parent::setVerified($verified);
    }

    public function setModerator($moderator)
    {
        $this->__load();
        return parent::setModerator($moderator);
    }

    public function setDisplayName($displayname)
    {
        $this->__load();
        return parent::setDisplayName($displayname);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'email', 'password', 'therapist', 'sex', 'code_of_conduct', 'ABA_course', 'moderator', 'verified', 'displayname');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}